Plan:

PolyFill fetch
  Promisify require(whatwg-fetch)
  Only download if needed
  http://anujnair.com/blog/13-conditionally-load-multiple-polyfills-using-webpack-promises-and-code-splitting

Limits on List Team and Members requests

rough in new user tutorial
rough in new user invited tutorial
Hook up preview badge button on app page
---------------------------------------

Upcoming Plan:
Decide on whether or not to show badges sent while user was blocked
  after they become unblocked

Style Landing Page
Style App Page
Style Team Page
Style User Invited Page
Create Tutorial / First time login
Validate against google login status (https://developers.google.com/identity/sign-in/web/listeners)
Check if on team when requesting badges by team (just returns 0 badges right now if not on team)
When user unsubscribes, remove endpoint
On Notification send, check if endpoint is still valid (remove if not)
Clean up API responses
Set up Test User Bots
Test APIs against odd characters
Handle Sending Badge to yourself (Currently fails)
Analytics
Offline notification page (for updates once live?)
---------------------------------------

Known Bugs
<none>
---------------------------------------

Before Release:
Look into Version Injection
  https://www.npmjs.com/package/webpack-auto-inject-version

Query Performance: https://neo4j.com/docs/cypher-refcard/current/ (see bottom right of page)

Optimize "recent badges" call.  Maybe keep relationships to the last 10 badges on the user node
	then return those, and sort client side
	On new badge creation, bump off oldest of ten on db/server side
	Or maintain a linked list with each badge pointing to the previous badge
	then just walk back 10 badges, and they will already be in order

DB Transaction rollback on failed calls?
upgrade logging to log to files / better control
Better gmail/email system token checking and error logging
log collection and analysis
externalize domain (replace all localhost references)
proper domain for vapidDetails
implement built in achievements
----------------------------------------

Test For
Names, Titles, Descriptions with quotes, brackets, parens and backslashes in them
----------------------------------------

Possibilities:
Send an id with page serve to use as a "key" for the api This will help prevent people from using the api when not from the page(probably not needed as we have cookies)
customizable notification display times
Think about usage of Amazon SNS for emails and SQS for a web push queue (offload web push to lambda?)
-----------------------------------------

DONE:
Error Message Manager (watches for errorevent)?
  Maybe use the UIManager to watch for this and throw a pop up

Result event loop
  Pop Up for Error Messages on website
  Double click blocking for buttons
  notification of new data
  UI update on new data
  Notification of request completion

Update appPage.js to use uigeb and new organization
  Send Badge Button disable/enable not working
Recent badges not working (fixed)
Update teamPage.js to use uigeb
setModstatus UI events
Wrap all Request Manager calls in Promises
UI Element .closeUI() function (remove listeners etc.. / mem leaks)
disable UI that we know will fail if clicked
  can't block yourself
  can't remove yourself as moderator
rough layout team management page
  hook up buttons on team management page
    team notifications checkbox
rough layout index page
set up api test page
ssl cert from let's encrypt
nGrok over https setup
Send Team based notifications
User Preferences (get team notifications?)
send invite emails
switch teams to not require a teamId AND teamName (drop the need for name)
retry promises during creation that end up with non-unique ids
Generate user ids, don't use google id
Save common user details in cookie / don't query DB every time!
Add check logged in middleware
List badges sent to specific user in a team
List badges sent to specific user
List All Sent Badges
Block/Unblock user
List My Badges
Badges By Team (team/badge integration)
Remove Badge Completely
Remove Badge For Me
Create/Store badges per user
Allow Team Member to remove themselves
Finish accept invite flow
- Take code, add user to team based on the invite db object
- Remove invite db object
- redirect back to index page

Handle Not logged in flow for accept invite
- store invite code in session (full invite url)
req.session.return_url = req.query.return_url;
- handle the login through google
- redirect back to return_url from session
- clean up return url from session

List Team Members
Moderator Remove Team Members
Moderator add additional moderator
Delete Team (moderator only)
-----------------------------------------

Fixed Bugs:
listMyTeams isn't returning anything for non-mods
listMyTeams returns many duplicates for mods
------------------------------------------